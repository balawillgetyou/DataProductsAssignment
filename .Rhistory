hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(training=="IL_11")
names(training=="male")
names(training="male")
training1 <- training[,58:69]
names(training1)
preProc <- preProcess(log10(training1[,-1]+1),method="pca",pcaComp=10)
hist(training1$IL_11)
hist(training1$IL_13)
hist(training1$IL_16)
hist(training1$IL_17E)
hist(training1$IL_1alpha)
hist(training1$IL_3)
hist(training1$IL_4)
hist(training1$IL_5)
hist(training1$IL_6)
hist(training1$IL_6_Receptor)
hist(training1$IL_7)
hist(training1$IL_8)
hist(training1$IL_1alpha)
hist(training1$IL_3)
training1 <- training[,58:69]
training1$IL_1alpha <- training1$IL_1alpha^2
training1$IL_3 <- training1$IL_3^2
preProc <- preProcess(training1,method="pca",pcaComp=10)
testPC <- predict(preProc,testing)
trainaD <- predict(preProc,training1)
testad <- predict(preProc,testing)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
preProc <- preProcess(training1,method="pca",pcaComp=11)
trainaD <- predict(preProc,training1)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
preProc <- preProcess(training1,method="pca",pcaComp=12)
trainaD <- predict(preProc,training1)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
preProc <- preProcess(training1,method="pca",pcaComp=7)
trainaD <- predict(preProc,training1)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
preProc <- preProcess(training1,method="pca",pcaComp=9)
trainaD <- predict(preProc,training1)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
preProc <- preProcess(training1,method="pca",pcaComp=11)
trainaD <- predict(preProc,training1)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
preProc <- preProcess(training1,method="pca",pcaComp=12)
trainaD <- predict(preProc,training1)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
preProc <- preProcess(training1,method="pca",pcaComp=12)
trainaD <- predict(preProc,training1)
modelFit <- train(training1$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
modelFit <- train(training1$diagnosis ~ .,method="glm",data=trainaD)
training1 <- training[,c(1,58:69)]
names(training1)
M <- abs(cor(training1[,-1]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
which(M > 0.5,arr.ind=T)
which(M > 0.6,arr.ind=T)
names(training1)
?preProcess
?predict
?train
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(training$diagnosis ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
preProc <- preProcess(training1,method="pca",pcaComp=12)
trainaD <- predict(preProc,training1)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainaD)
testaD <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testaD))
modelFit <- train(training$diagnosis ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
testop <- predict(modelFit,testing)
summary(testop)$coef
summary(testop)
(testing$diagnosis,predict(modelFit,testing))
training$diagnosis ~ .,method="glm",preProcess="pca",data=training
library(ISLR); library(ggplot2); library(caret);
data(Wage);
summary(Wage)
dim(wage)
dim(Wage)
data(Wage); Wage <- subset(Wage,select=-c(logwage))
dim(Wage)
summary(Wage)
data(Wage); Wage <- subset(Wage,select=-c(logwage))
names(Wage)
data(Wage); Wage <- subset(Wage,select=-c(logwage))
names(Wage)
data(Wage);
names(Wage)
featurePlot(x=training[,c("age","education","jobclass")], y = training$wage,plot="pairs")
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training1 <- training[,c(1,58:69)]
featurePlot(x=training[2:13], y = training[1],plot="pairs")
modFit<- train(wage ~ age + jobclass + education,method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
modFit<- train(diagnosis ~ ., preProcess="pca",method = "glm",data=training)
finMod <- modFit$finalModel
print(modFit)
modFit<- train(diagnosis ~ ., preProcess="pca",method = "glm",data=training1)
finMod <- modFit$finalModel
print(modFit)
pca_job<-princomp(training1,cor=FALSE)
pca_job<-princomp(training1,cor=T)
pca_job<-princomp(training,cor=T)
modFit<- train(diagnosis ~ ., preProcess="pca",method = "glm",data=training1)
finMod <- modFit$finalModel
print(modFit)
modFit<- train(diagnosis ~ ., preProcess="pca",method = "glm",data=training)
finMod <- modFit$finalModel
print(modFit)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training1 <- training[,c(1,58:69)]
names(training1)
hist(training1$IL_11)
hist(training1$IL_13)
hist(training1$IL_16)
hist(training1$IL_17E)
hist(training1$IL_1alpha)
hist(training1$IL_3)
hist(training1$IL_4)
hist(training1$IL_5)
hist(training1$IL_6)
hist(training1$IL_6_Receptor)
hist(training1$IL_7)
hist(training1$IL_8)
training1$IL_1alpha <- training1$IL_1alpha^2
names(training1)
training1 <- training[,c(1,58:69)]
preProc <- preProcess(training1,method=c("BoxCox"))
hist(training1$IL_1alpha)
hist(training1$IL_3)
?preProcess
IL_cols <- grep("IL", colnames(training), value=T)
IL_cols
training1 <- training[,c(1,58:69)]
names(training1)
IL_cols <- grep("^IL", colnames(training), value=T)
IL_cols
preProc <- preProcess(training[,IL_cols],method="pca",thresh=.9)
preProc$rotation
hist(training$Superplasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
dim(training)
head(training)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_cols <- grep("^IL", colnames(training), value=T)
training1 <- training[,IL_cols]
names(training1)
names(training)
training1 <- cbind(training[1],training1)
names(training1)
modFitAll<- train(diagnosis ~ .,data=training1,method="glm")
pred <- predict(modFitAll, testing)
pred
summary(modFitAll)$FinalModel
summary(modFitAll$finalModel)
confusionMatrix(testing$diagnosis,predict(modFitAll,testing))
modFitAll2<- train(diagnosis ~ .,preProcess="pca",data=training1,method="glm")
summary(modFitAll2$finalModel)
confusionMatrix(testing$diagnosis,predict(modFitAll2,testing))
confusionMatrix(testing$diagnosis,predict(modFitAll,testing))
confusionMatrix(testing$diagnosis,predict(modFitAll2,testing))
modFitAll2<- train(diagnosis ~ .,preProcess="pca",data=training1,method="glm",trControl = trainControl(preProcOptions = list(thresh = 0.8)))
confusionMatrix(testing$diagnosis,predict(modFitAll2,testing))
data(iris); library(ggplot2)
table(iris$Species)
summary(iris)
inTrain <- createDataPartition(y=iris$Species,p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
dim(training); dim(testing)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(caret)
data(iris)
str(iris)
summary(iris)
iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[1,-5]
test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
test[[1]]
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
library(caret)
data(iris)
str(iris)
summary(iris)
iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[2,-5]
test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
test[[1]]
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
library(caret)
data(iris)
str(iris)
summary(iris)
iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[2,-5]
#test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
#test[[1]]
library(caret)
data(iris)
str(iris)
summary(iris)
iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[3,-5]
#test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
#test[[1]]
library(caret)
data(iris)
str(iris)
summary(iris)
iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[16,-5]
#test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
#test[[1]]
str(iris)
library(caret)
data(iris)
str(iris)
summary(iris)
iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[116,-5]
#test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
#test[[1]]
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
?isolate
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
library(caret)
data(iris)
str(iris)
summary(iris)
iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[116,-5]
#test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
#test[[1]]
library(caret)
# data(iris)
# str(iris)
# summary(iris)
# iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
test <- iris[116,-5]
#test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
#test[[1]]
library(caret)
# data(iris)
# str(iris)
# summary(iris)
# iris
modFit <- train(Species~., data=iris, method="rf",prox=TRUE)
#pred <- predict(modFit, c(5,3,3,1))
#test <- as.data.frame(5,3,3,1)
#names(test) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
#test <- iris[116,-5]
test[1,] <- c(5,3,3,1)
pred <- predict(modFit, test)
pred
#test[[1]]
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Assignment')
runApp(display.mode = "showcase")
shiny::runApp('Learning/Coursera/09_Developing_data_products/Exercise')
shiny::runApp('Learning/Coursera/09_Developing_data_products/Exercise')
runApp(display.mode='showcase')
library(shiny)
library(shinyapps)
library(rsconnect)
runApp(display.mode='showcase')
setwd("~/Learning/Coursera/09_Developing_data_products/Assignment/irisApp")
runApp(display.mode='showcase')
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
runApp(display.mode='showcase')
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
runApp(display.mode='showcase')
library(randomForest)
runApp(display.mode='showcase')
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::showLogs()
runApp(display.mode='showcase')
install.packages("e1071", dependencies = TRUE)
library(e1071)
runApp(display.mode='showcase')
library(shiny)
library(shinyapps)
library(rsconnect)
library(randomForest)
runApp(display.mode='showcase')
install.packages("e1071", dependencies = TRUE)
runApp(display.mode='showcase')
library(shiny)
library(shinyapps)
library(rsconnect)
library(randomForest)
runApp(display.mode='showcase')
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
